/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Message;
import io.swagger.model.MessageCreate;
import io.swagger.model.MessageIdRateBody;
import io.swagger.model.MessageUpdate;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-23T08:00:03.294912786Z[GMT]")
@Validated
public interface MessagesApi {

    @Operation(summary = "Create a new message", description = "Add a new message to the system", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Message created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "422", description = "Validation exception", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Message> createMessage(@Parameter(in = ParameterIn.DEFAULT, description = "Message object to be created", required=true, schema=@Schema()) @Valid @RequestBody MessageCreate body
);


    @Operation(summary = "Create a reply to a message", description = "Create a reply to an existing message", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Reply created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Parent message not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "422", description = "Validation exception", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages/{messageId}/reply",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Message> createReply(@Parameter(in = ParameterIn.PATH, description = "ID of parent message", required=true, schema=@Schema()) @PathVariable("messageId") UUID messageId
, @Parameter(in = ParameterIn.DEFAULT, description = "Reply message to create", required=true, schema=@Schema()) @Valid @RequestBody MessageCreate body
);


    @Operation(summary = "Delete a message", description = "Delete a message by ID", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Message deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Message not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages/{messageId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMessage(@Parameter(in = ParameterIn.PATH, description = "ID of message to delete", required=true, schema=@Schema()) @PathVariable("messageId") UUID messageId
);


    @Operation(summary = "Get message by ID", description = "Returns a single message by ID", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "404", description = "Message not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages/{messageId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Message> getMessageById(@Parameter(in = ParameterIn.PATH, description = "ID of message to return", required=true, schema=@Schema()) @PathVariable("messageId") UUID messageId
);


    @Operation(summary = "Get all replies to a message", description = "Retrieve all replies to a specific message", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Message.class)))),
        
        @ApiResponse(responseCode = "404", description = "Parent message not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages/{messageId}/replies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Message>> getMessageReplies(@Parameter(in = ParameterIn.PATH, description = "ID of parent message", required=true, schema=@Schema()) @PathVariable("messageId") UUID messageId
);


    @Operation(summary = "Get messages", description = "Retrieve messages with optional filtering", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Message.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid query parameters", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Message>> getMessages(@Parameter(in = ParameterIn.QUERY, description = "Filter by user ID" ,schema=@Schema()) @Valid @RequestParam(value = "userId", required = false) UUID userId
, @Parameter(in = ParameterIn.QUERY, description = "Filter by parent message ID (for replies)" ,schema=@Schema()) @Valid @RequestParam(value = "parentId", required = false) UUID parentId
);


    @Operation(summary = "Rate a message", description = "Give a rating to a message (upvote/downvote)", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Rating updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Message not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages/{messageId}/rate",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Message> rateMessage(@Parameter(in = ParameterIn.PATH, description = "ID of message to rate", required=true, schema=@Schema()) @PathVariable("messageId") UUID messageId
, @Parameter(in = ParameterIn.DEFAULT, description = "Rating value (+1 for upvote, -1 for downvote)", required=true, schema=@Schema()) @Valid @RequestBody MessageIdRateBody body
);


    @Operation(summary = "Update an existing message", description = "Update the content of an existing message by ID", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Message updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Message not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "422", description = "Validation exception", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/messages/{messageId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Message> updateMessage(@Parameter(in = ParameterIn.PATH, description = "ID of message to update", required=true, schema=@Schema()) @PathVariable("messageId") UUID messageId
, @Parameter(in = ParameterIn.DEFAULT, description = "Updated message content", required=true, schema=@Schema()) @Valid @RequestBody MessageUpdate body
);

}

